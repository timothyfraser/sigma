[["index.html", "System Reliability and Six Sigma in R Introduction", " System Reliability and Six Sigma in R Timothy Fraser 2022-10-28 Introduction Figure 1: Photo by Naser Tamimi on Unsplash "],["lesson-1-coding-in-r.html", "Lesson 1: Coding in R 0. Getting Started 1. Introduction 2. Basic Calculations in R LC 1 3. Types of Values in R 4. Types of Data in R LC 2 5. Common Functions in R 6. Missing Data LC 3 7. Packages 8. Visualizing Data with Histograms LC 4 9. Wrap-up", " Lesson 1: Coding in R Welcome to RStudio Cloud! You made it! This document will introduce you to how to start coding in R, using RStudio Cloud. We will use the R statistical coding language frequently in class to conduct analyses and visualization. Hello world! We are coding in R! 0. Getting Started 0.1 Making an RStudio.Cloud account We’ll be using RStudio.Cloud, a virtual version of R you can access from any computer with an internet browser (PC, Mac, Chromebook, anything). To get set up, please follow the steps in this short Video playlist! 0.2 Accessing your First RStudio.Cloud Tutorial Today’s tutorial is at the following link: https://timothyfraser.github.io/sysen/workshop_1 Please copy and paste it into your browser url bar! For a quick visual orientation, take a peek at the image below. Read and follow along with the instructions on the webpage! Read the tutorial code (below), and then type it in and run it in your R session! (#fig:img-1_0)Visual Intro to Using RStudio.Cloud 1. Introduction The document in your RStudio Cloud project document is an ‘R script.’ (its name ends in .R). It contains two kinds of text: ‘code’ - instructions to our statistical calculator ‘comments’ - any text that immediately follows a ‘#’ sign. # For example, # Comments are ignored by the calculator, so we can write ourselves notes. Notice: 4 windows in R. Window 1 (upper left): Scripts! Window 2 (bottom left): Console (this shows the output for our calculator) Window 3 (upper right): Environment (this shows any data the computer is holding onto for us) Window 4 (bottom right): Files (this shows our working project folder, our scripts, and any data files.) A few tips: To change the background theme (and save your eyes), go to Tools &gt;&gt; Global Options &gt;&gt; Appearance &gt;&gt; Editor Theme &gt;&gt; Dracula To increase the font size, go to Tools &gt;&gt; Global Options &gt;&gt; Appearance &gt;&gt; Editor Font Size To make a script, go to File &gt;&gt; New File &gt;&gt; R Script, then save it and name it. Figure 2: Figure 2: Open New Script, and Save it! Figure 3: Figure 2: Open New Script, and Save it! Let’s learn to use R! 2. Basic Calculations in R Try highlighting the following with your cursor, and then press CTRL and ENTER simultaneously, or the ‘Run’ button above. Addition: 1 + 5 ## [1] 6 Subtraction: 5 - 2 ## [1] 3 Multiplication: 2 * 3 ## [1] 6 Division: 15 / 5 ## [1] 3 Exponents: 2^2 ## [1] 4 Square-Roots: sqrt(4) ## [1] 2 Order of Operations: Still applies! Like in math normally, R calculations are evaluated from left to right, prioritizing parentheses, then multiplication and division, then addition and subtraction. 2 * 2 - 5 ## [1] -1 Use Parentheses! 2 * (2 - 5) ## [1] -6 LC 1 ‘LC’ stands for Learning Check! Our tutorials have questions throughout to give you some short coding challenges to try and work through. Below is the question tab. Read the question, and try to answer it on your own! Then, click the answer button to see the answer. (Note: There are often many different ways to code the same thing!) Feeling stumped? You can check the answer, but be sure to code it yourself afterwards! Question Try calculating something wild in R! Solve for x below using the commands you just learned in R! \\(x = \\sqrt{ (\\frac{2 - 5 }{5})^{4} }\\) \\(x = (1 - 7)^{2} \\times 5 - \\sqrt{49}\\) \\(x = 2^{2} + 2^{2} \\times 2^{2} - 2^{2} \\div 2^{2}\\) Answer Here’s how we coded it! How does yours compare? If your result is different, compare code. What’s different? Be sure to go back and adjust your code so you understand the answer! \\(x = \\sqrt{ (\\frac{2 - 5 }{5})^{4} }\\) sqrt( ((2 - 5) / 5)^4 ) ## [1] 0.36 \\(x = (1 - 7)^{2} \\times 5 - \\sqrt{49}\\) (1 - 7)^2 * 5 - sqrt(49) ## [1] 173 \\(x = 2^{2} + 2^{2} \\times 2^{2} - 2^{2} \\div 2^{2}\\) 2^2 + 2^2 * 2^2 - 2^2 / 2^2 ## [1] 19 3. Types of Values in R R accepts 2 type of data: # Numeric Values 15000 ## [1] 15000 0.0005 ## [1] 5e-04 -8222 # notice no commas allowed ## [1] -8222 and # Character Strings &quot;Coding!&quot; # Uses quotation marks ## [1] &quot;Coding!&quot; &quot;Corgis!&quot; # Can contain anything - numbers, characters, etc. ## [1] &quot;Corgis!&quot; &quot;Coffee!&quot; ## [1] &quot;Coffee!&quot; (Note: R also uses something called factors, which are characters, but have a specific order. We’ll learn them later.) 4. Types of Data in R Values First, R uses values - which are single numbers or characters. 2 # this is a value ## [1] 2 &quot;x&quot; # this is also a value ## [1] &quot;x&quot; You can save a value as a named object in the R Environment. That means, we tell R to remember that whenever you use a certain name, it means that value. To name something as an object, use an arrow! myvalue &lt;- 2 Now let’s highlight and press CTRL ENTER on myvalue (or the Mac Equivalent). myvalue ## [1] 2 Notice how it’s listed in the R Environment (upper right), and how it outputs as 2 in the console? We can do operations too! secondvalue &lt;- myvalue + 2 # add 2 to myvalue secondvalue # check new value - oooh, it&#39;s 4! ## [1] 4 We can also overwrite old objects with new objects. myvalue &lt;- &quot;I overwrote it!&quot; myvalue ## [1] &quot;I overwrote it!&quot; And we can also remove objects from the Environment, with remove(). remove(myvalue, secondvalue) Vectors Second, R contains values in vectors, which are sets of values. # This is a numeric vector c(1, 4, 8) # is the same as 1, 4, 8 ## [1] 1 4 8 and… # This is a character vector c(&quot;Boston&quot;, &quot;New York&quot;, &quot;Los Angeles&quot;) ## [1] &quot;Boston&quot; &quot;New York&quot; &quot;Los Angeles&quot; But if you combine numeric and character values in one vector… # This doesn&#39;t work - R immediately makes it into a character vector c(1, &quot;Boston&quot;, 2) ## [1] &quot;1&quot; &quot;Boston&quot; &quot;2&quot; Why do we use vectors? Because you can do mathematical operations on entire vectors of values, all at once! c(1,2,3,4) * 2 # this multiplies each value by 2! ## [1] 2 4 6 8 c(1,2,3,4) + 2 # this adds 2 to each value! ## [1] 3 4 5 6 We can save vectors as objects too! # Here&#39;s a vector of (hypothetical) seawall heights in 10 towns. myheights &lt;- c(4, 4.5, 5, 5, 5, 5.5, 5.5, 6, 6.5, 6.5) # And here&#39;s a list of hypothetical names for those towns mytowns &lt;- c(&quot;Gloucester&quot;, &quot;Newburyport&quot;, &quot;Provincetown&quot;, &quot;Plymouth&quot;, &quot;Marblehead&quot;, &quot;Chatham&quot;, &quot;Salem&quot;, &quot;Ipswich&quot;, &quot;Falmouth&quot;, &quot;Boston&quot;) # And here&#39;s a list of years when those seawalls were each built. myyears &lt;- c(1990, 1980, 1970, 1930, 1975, 1975, 1980, 1920, 1995, 2000) Plus, we can still do operations on entire vectors! myyears + 1 ## [1] 1991 1981 1971 1931 1976 1976 1981 1921 1996 2001 Dataframes Third, R bundles vectors into data.frames. # Using the data.frame command, we make a data.frame, data.frame( height = myheights, # length 10 town = mytowns, # length 10 year = myyears) # length 10 ## height town year ## 1 4.0 Gloucester 1990 ## 2 4.5 Newburyport 1980 ## 3 5.0 Provincetown 1970 ## 4 5.0 Plymouth 1930 ## 5 5.0 Marblehead 1975 ## 6 5.5 Chatham 1975 ## 7 5.5 Salem 1980 ## 8 6.0 Ipswich 1920 ## 9 6.5 Falmouth 1995 ## 10 6.5 Boston 2000 And inside, we put a bunch of vectors of EQUAL LENGTHS, giving each vector a name. And when it outputs in the console, it looks like a spreadsheet! BECAUSE ALL SPREADSHEETS ARE DATAFRAMES! AND ALL COLUMNS ARE VECTORS! AND ALL CELLS ARE VALUES! Actually, we can make data.frames into objects too! # Let&#39;s name our data.frame about seawalls &#39;sw&#39; sw &lt;- data.frame( height = myheights, town = mytowns, year = myyears) # Notice this last parenthesis; very important # Check the contents of sw! sw ## height town year ## 1 4.0 Gloucester 1990 ## 2 4.5 Newburyport 1980 ## 3 5.0 Provincetown 1970 ## 4 5.0 Plymouth 1930 ## 5 5.0 Marblehead 1975 ## 6 5.5 Chatham 1975 ## 7 5.5 Salem 1980 ## 8 6.0 Ipswich 1920 ## 9 6.5 Falmouth 1995 ## 10 6.5 Boston 2000 Although, we could do this too, and it would be equivalent: sw &lt;- data.frame( # It&#39;s okay to split code across multiple lines. # It keeps things readable. height = c(4, 4.5, 5, 5, 5, 5.5, 5.5, 6, 6.5, 6.5), town = c(&quot;Gloucester&quot;, &quot;Newburyport&quot;, &quot;Provincetown&quot;, &quot;Plymouth&quot;, &quot;Marblehead&quot;, &quot;Chatham&quot;, &quot;Salem&quot;, &quot;Ipswich&quot;, &quot;Falmouth&quot;, &quot;Boston&quot;), year = c(1990, 1980, 1970, 1930, 1975, 1975, 1980, 1920, 1995, 2000)) # Let&#39;s check out our dataframe! sw ## height town year ## 1 4.0 Gloucester 1990 ## 2 4.5 Newburyport 1980 ## 3 5.0 Provincetown 1970 ## 4 5.0 Plymouth 1930 ## 5 5.0 Marblehead 1975 ## 6 5.5 Chatham 1975 ## 7 5.5 Salem 1980 ## 8 6.0 Ipswich 1920 ## 9 6.5 Falmouth 1995 ## 10 6.5 Boston 2000 But what if we want to work with the vectors again? We can use the ‘$’ sign to say, ‘grab the following vector from inside this data.frame.’ sw$height ## [1] 4.0 4.5 5.0 5.0 5.0 5.5 5.5 6.0 6.5 6.5 We can also do operations on that vector from within the dataframe. sw$height + 1 ## [1] 5.0 5.5 6.0 6.0 6.0 6.5 6.5 7.0 7.5 7.5 We can also update values, like the following: # sw$height &lt;- sw$height + 1 # I&#39;ve put this in comments, since I don&#39;t actually want to do it (it&#39;ll change our data) # but good to know, right? LC 2 Question How would you make your own data.frame? Please make up a data.frame of with 3 vectors and 4 values each. Make 1 vector numeric and 2 vectors character data. How many rows are in that data.frame? Answer Here’s my example! # Make a data.frame called &#39;mayhem&#39; mayhem &lt;- data.frame( # make a character vector of 4 dog by their names dogs = c(&quot;Mocha&quot;, &quot;Domino&quot;, &quot;Latte&quot;, &quot;Dot&quot;), # Classify the type of dog as a character vector types = c(&quot;corgi&quot;, &quot;dalmatian&quot;, &quot;corgi&quot;, &quot;dalmatian&quot;), # Record the number of treats eaten per year per dog treats_per_year = c(5000, 3000, 2000, 10000)) # View the resulting &#39;mayhem&#39;! mayhem ## dogs types treats_per_year ## 1 Mocha corgi 5000 ## 2 Domino dalmatian 3000 ## 3 Latte corgi 2000 ## 4 Dot dalmatian 10000 5. Common Functions in R We can also run functions that come pre-installed to analyze vectors. These include: mean(), median(), sum(), min(), max(), range(), quantile(), sd(), var(), and length(). Figure 4: Figure 3: Descriptive Stats function Cheatsheet! Measures of Central Tendency mean(sw$height) # the mean seawall height among these towns ## [1] 5.35 median(sw$height) # the median seawall height ## [1] 5.25 sum(sw$height) # total meters of seawall height! (weird number, but okay) ## [1] 53.5 Measures of Dispersion min(sw$height) # smallest seawall height ## [1] 4 max(sw$height) # tallest seawall height ## [1] 6.5 range(sw$height) # range of seawalls (min &amp; max) ## [1] 4.0 6.5 quantile(sw$height, probs = 0.25) # 25th percentile ## 25% ## 5 quantile(sw$height, probs = 0.75) # 75th percentile ## 75% ## 5.875 sd(sw$height) # the standard deviation of seawall heights ## [1] 0.8181958 var(sw$height) # the variance of seawall heights (= standard deviation squared) ## [1] 0.6694444 Other Good Functions length(sw$height) # the number of values in this vector ## [1] 10 length(sw) # the number of vectors in this data.frame ## [1] 3 That’s really fast! We’ll learn more about these descriptive statistics in later lessons! 6. Missing Data Sometimes, data.frames include missing data for a case/observation. For example, let’s say there is an 11th town, where the seawall height is unknown. # We would write: mysw &lt;- c(4, 4.5, 5, 5, 5, 5.5, 5.5, 6, 6.5, 6.5, NA) # see the &#39;NA&#39; for non-applicable If you run mean(mysw) now, R doesn’t know how to add 6.5 + NA. The output will become NA instead of 5.35. mean(mysw) ## [1] NA To fix this, we can add an ‘argument’ to the function, telling it to omit NAs from the calculation. mean(mysw, na.rm = TRUE) # short for, &#39;remove NAs&#39; ## [1] 5.35 Pretty cool, no? Each function is unique, often made by different people, so only these functions have na.rm as an argument. LC 3 Question Jun Kanda (2015) measured max seawall heights (seawall_m) in 13 Japanese towns (town) after the 2011 tsunami in Tohoku, Japan, compared against the height of the tsunami wave (wave_m). Using this table, please code and answer the questions below. town seawall_m wave_m Kuji South 12.0 14.5 Fudai 15.5 18.4 Taro 13.7 16.3 Miyako 8.5 11.8 Yamada 6.6 10.9 Ohtsuchi 6.4 15.1 Tohni 11.8 21.0 Yoshihama 14.3 17.2 Hirota 6.5 18.3 Karakuwa East 6.1 14.4 Onagawa 5.8 18.0 Souma 6.2 14.5 Nakoso 6.2 7.7 Reproduce this table as a data.frame in R, and save it as an object named jp. How much greater was the mean height of the tsunami than the mean height of seawalls? Evaluate how much these heights varied on average among towns. Did seawall height vary more than tsunami height? How much more/less? Answer Reproduce this table as a data.frame in R, and save it as an object named jp. # Make a dataframe named jp, jp &lt;- data.frame( # containing a character vector of 13 town names, town = c(&quot;Kuji South&quot;, &quot;Fudai&quot;, &quot;Taro&quot;, &quot;Miyako&quot;, &quot;Yamada&quot;, &quot;Ohtsuchi&quot;, &quot;Tohni&quot;, &quot;Yoshihama&quot;, &quot;Hirota&quot;, &quot;Karakuwa East&quot;, &quot;Onagawa&quot;, &quot;Souma&quot;, &quot;Nakoso&quot;), # and a numeric vector of 13 max seawall heights in meters seawall_m = c(12.0, 15.5, 13.7, 8.5, 6.6, 6.4, 11.8, 14.3, 6.5, 6.1, 5.8, 6.2, 6.2), # and a numeric vector of 13 max tsunami heights in meters wave_m = c(14.5, 18.4, 16.3, 11.8, 10.9, 15.1, 21.0, 17.2, 18.3, 14.4, 18.0, 14.5, 7.7) ) # View contents! jp ## town seawall_m wave_m ## 1 Kuji South 12.0 14.5 ## 2 Fudai 15.5 18.4 ## 3 Taro 13.7 16.3 ## 4 Miyako 8.5 11.8 ## 5 Yamada 6.6 10.9 ## 6 Ohtsuchi 6.4 15.1 ## 7 Tohni 11.8 21.0 ## 8 Yoshihama 14.3 17.2 ## 9 Hirota 6.5 18.3 ## 10 Karakuwa East 6.1 14.4 ## 11 Onagawa 5.8 18.0 ## 12 Souma 6.2 14.5 ## 13 Nakoso 6.2 7.7 How much greater was the mean height of the tsunami than the mean height of seawalls? # Get mean of wave height mean(jp$wave_m) ## [1] 15.23846 The average wave was 15.24 meters tall. # Get mean of seawall height mean(jp$seawall_m) ## [1] 9.2 The average seawall was 9.2 meters tall. # Get difference in mean seawall height mean(jp$wave_m) - mean(jp$seawall_m) ## [1] 6.038462 The average wave was 6.04 meters taller than the average seawall. Evaluate how much these heights varied on average among towns. Did seawall height vary more than tsunami height? How much more/less? # Get standard deviation of wave height sd(jp$wave_m) ## [1] 3.587603 On average, wave height varied by 3.59 meters. # Get standard deviation of seawall height sd(jp$seawall_m) ## [1] 3.675368 On average, seawall height varied by 3.68 meters. # Get difference sd(jp$wave_m) - sd(jp$seawall_m) ## [1] -0.08776516 That means wave height varied by -0.09 meters less than seawall height. 7. Packages 7.1 Using Packages Some functions come pre-built into R, but lots of people have come together to build ‘packages’ of functions that help R users all over the world do more, cool things, so we don’t each have to ‘reinvent the wheel.’ ggplot2, which we use below, is one of these! 7.2 Installing Packages We can use the library() function to load a package (like fipping an ‘on’ switch for the package). After loading it, R will recognize that package’s functions when you run them! But if you try to load a package that has never been installed on your computer, you might get this error: library(ggplot2) Error in library(ggplot2) : there is no package called ‘ggplot2’ In this case, we need to install those packages (only necessary once), using install.packages(). (If a message pops up, just accept ‘Yes’.) install.packages(c(&quot;ggplot2&quot;, &quot;dplyr&quot;)) After a successful install, you’ll get a message like this: ================================================== downloaded 1.9 MB * installing *binary* package ‘ggplot2’ ... * DONE (ggplot2) * installing *binary* package ‘dplyr’ ... * DONE (dplyr) The downloaded source packages are in ‘/tmp/RtmpefCnYe/downloaded_packages’ 7.3 Loading Packages Finally, we can load our packages with library(). library(ggplot2) library(dplyr) Tada! You have turned on your packages! 8. Visualizing Data with Histograms The power of R is that you can process data, calculate statistics, and visualize it all together, very quickly. We can do this using hist() and geom_histogram(), among other functions. 8.1 hist() For example, let’s imagine that we had seawall height data from cities in several states. We might want to compare those states. # Create 30 cities, ten per state (MA, RI, ME) allsw &lt;- data.frame( height = c(4, 4.5, 5, 5, 5.5, 5.5, 5.5, 6, 6, 6.5, 4, 4,4, 4, 4.5, 4.5, 4.5, 5, 5, 6, 5.5, 6, 6.5, 6.5, 7, 7, 7, 7.5, 7.5, 8), states = c(&quot;MA&quot;,&quot;MA&quot;,&quot;MA&quot;,&quot;MA&quot;,&quot;MA&quot;,&quot;MA&quot;,&quot;MA&quot;,&quot;MA&quot;,&quot;MA&quot;,&quot;MA&quot;, &quot;RI&quot;,&quot;RI&quot;,&quot;RI&quot;,&quot;RI&quot;,&quot;RI&quot;,&quot;RI&quot;,&quot;RI&quot;,&quot;RI&quot;,&quot;RI&quot;,&quot;RI&quot;, &quot;ME&quot;,&quot;ME&quot;,&quot;ME&quot;,&quot;ME&quot;,&quot;ME&quot;,&quot;ME&quot;,&quot;ME&quot;,&quot;ME&quot;,&quot;ME&quot;,&quot;ME&quot;)) # Take a peek! allsw ## height states ## 1 4.0 MA ## 2 4.5 MA ## 3 5.0 MA ## 4 5.0 MA ## 5 5.5 MA ## 6 5.5 MA ## 7 5.5 MA ## 8 6.0 MA ## 9 6.0 MA ## 10 6.5 MA ## 11 4.0 RI ## 12 4.0 RI ## 13 4.0 RI ## 14 4.0 RI ## 15 4.5 RI ## 16 4.5 RI ## 17 4.5 RI ## 18 5.0 RI ## 19 5.0 RI ## 20 6.0 RI ## 21 5.5 ME ## 22 6.0 ME ## 23 6.5 ME ## 24 6.5 ME ## 25 7.0 ME ## 26 7.0 ME ## 27 7.0 ME ## 28 7.5 ME ## 29 7.5 ME ## 30 8.0 ME Every vector is a distribution - a range of low to high values. We can use the hist() function to quickly visualize a vector’s distribution. hist(allsw$height) 8.2 geom_histogram() in ggplot2 hist() is great for a quick check, but for anything more complex, we’re going to use ggplot2, the most popular visualization package in R. # Load ggplot2 package library(ggplot2) # Tell the ggplot function to... ggplot( # draw data from the &#39;allsw&#39; data.frame data = allsw, # and &#39;map&#39; the vector &#39;height&#39; to be an &#39;aes&#39;thetic on the &#39;x&#39;-axis. mapping = aes(x = height)) + # make histograms of distribution, geom_histogram( # With white outlines color = &quot;white&quot;, # With blue inside fill fill = &quot;steelblue&quot;, # where every half meter gets a bin (binwidth = 0.5) binwidth = 0.5) + # add labels labs(x = &quot;Seawall Height&quot;, y = &quot;Frequency (# of cities)&quot;) Looks much nicer, right? Lots more code, but lots more options for customizing. We’ll learn ggplot2 more over this term, and it will become second nature in time! (Just takes practice!) The value of ggplot2 really comes alive when we make complex visuals. For example, our data allsw$height essentially contains 3 vectors, one per state; one for MA, one for RI, one for ME. Can we visualize each of these vectors’ distributions using separate histograms? # Repeat code from before... ggplot(data = allsw, mapping = aes(x = height)) + geom_histogram(color = &quot;white&quot;, fill = &quot;steelblue&quot;, binwidth = 0.5) + labs(x = &quot;Seawall Height&quot;, y = &quot;Frequency (# of cities)&quot;) + # don&#39;t forget the &#39;+&#39;! # But also ## Split into panels by state! facet_wrap(~states) We can now see, according to our hypothetical example, that states host different distributions of seawall heights. Massachusetts (MA) has lower seawalls, evenly distributed around 5.5 m. Maine (ME) has higher seawalls, skewed towards 7 m. Rhode Island (RI) has lower seawalls, skewed towards 4 m. LC 4 Question Challenge: Please make a histogram of Jun Kanda’s sample of seawall heights (seawall_m) in the jp object from LC 3. First, make a histogram using the hist() function. Then, try and use the geom_histogram() function from ggplot2! Answer First, make a histogram using the hist() function. # Tell R to make a histogram from the &#39;seawall_m&#39; vector inside &#39;jp&#39;! hist(jp$seawall_m) Then, try and use the geom_histogram() function from ggplot2! # Tell ggplot to grab the &#39;seawall_m&#39; vector from the &#39;jp&#39; data.frame, # and make a histogram! ggplot(data = jp, mapping = aes(x = seawall_m)) + geom_histogram() Looks pretty weird, huh? hist() automatically chooses the binwidth, but ggplot() gives us more control over the whole plot. We’ll learn more about this soon! 9. Wrap-up 9.1 Next Steps Throughout the rest of the course, we’re going to advance each of these skills: working with types of data in R calculating meaningful statistics in R visualizing meaningful trends in R 9.2 Advice Be sure to clear your environment often. That means, using remove() or the broom tool in the upper right hand corner. remove(allsw, mysw, sw, myheights, mytowns, myyears) You can clean your console too, using broom in console’s upper right corner. Save often. (Control + Save usually works on PC.) You can download files using more / export, or upload them. You’ll be a rockstar at using R in no time! Stay tuned for our next Workshop! 9.3 Troubleshooting: If your session freezes, go to ‘Session’ &gt;&gt; ‘Restart R.’ If that doesn’t work, go to ‘Session’ &gt;&gt; ‘Terminate’. If that doesn’t work, click on the elipsis (…) in the white banner at the top, and select Relaunch Project. If that doesn’t work, let me know! Having problems? There are three causes of most all problems in R. there’s a missing parenthesis or missing quotation mark in one’s code. You’re using a function from a package that needs to be loaded (we’ll talk about this in later workshops). Too much data in your environment is causing R to crash. Clear the environment. "],["skill-visualization-with-ggplot-in-r.html", "Skill: Visualization with ggplot in R 0. Loading Packages 1. Gapminder data 2. Your first scatterplot LC 1 LC 2 LC 3 4. Improving our Visualizations LC 4 LC 5", " Skill: Visualization with ggplot in R Visualization is a key part of statistical analyses, especially in systems engineering! Visuals themselves are often the analysis themselves! In this tutorial, we’re going to learn how to visualize data in the ggplot2 package. Please follow along using the code below! 0. Loading Packages Finally, let’s load our packages with library(). # Data viz and data manipulation packages library(ggplot2) library(dplyr) # Data sources library(gapminder) Notes: SAVE YOUR SCRIPT. Always comment your code (what I’m doing now), use lots of spaces, and keep it clean. 1. Gapminder data Economist Hans Rosling made a dataset that examines change in life expectancy over time for most countries in the world. It is contained in the gapminder package! # Let&#39;s view it. (see console below) gapminder ## # A tibble: 1,704 × 6 ## country continent year lifeExp pop gdpPercap ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Afghanistan Asia 1952 28.8 8425333 779. ## 2 Afghanistan Asia 1957 30.3 9240934 821. ## 3 Afghanistan Asia 1962 32.0 10267083 853. ## 4 Afghanistan Asia 1967 34.0 11537966 836. ## 5 Afghanistan Asia 1972 36.1 13079460 740. ## 6 Afghanistan Asia 1977 38.4 14880372 786. ## 7 Afghanistan Asia 1982 39.9 12881816 978. ## 8 Afghanistan Asia 1987 40.8 13867957 852. ## 9 Afghanistan Asia 1992 41.7 16317921 649. ## 10 Afghanistan Asia 1997 41.8 22227415 635. ## # … with 1,694 more rows Each row is a country-year, marking the life expectancy, population, and gross domestic product (GDP) per capita. On your end, you can only can see some of it, right? Let&#39;s check out what vectors are in this dataframe, using the `glimpse` function from the `dplyr` package. # (Remember, a vector is a column in a spreadsheet; # a data.frame is a spreadsheet.) glimpse(gapminder) ## Rows: 1,704 ## Columns: 6 ## $ country &lt;fct&gt; &quot;Afghanistan&quot;, &quot;Afghanistan&quot;, &quot;Afghanistan&quot;, &quot;Afghanistan&quot;, … ## $ continent &lt;fct&gt; Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, … ## $ year &lt;int&gt; 1952, 1957, 1962, 1967, 1972, 1977, 1982, 1987, 1992, 1997, … ## $ lifeExp &lt;dbl&gt; 28.801, 30.332, 31.997, 34.020, 36.088, 38.438, 39.854, 40.8… ## $ pop &lt;int&gt; 8425333, 9240934, 10267083, 11537966, 13079460, 14880372, 12… ## $ gdpPercap &lt;dbl&gt; 779.4453, 820.8530, 853.1007, 836.1971, 739.9811, 786.1134, … # Nice, we can see things more concisely. Our data has six variables. Great! 2. Your first scatterplot Using the gapminder data, let’s map a series of vectors to become aesthetic features in the visualization (point, colors, fills, etc.). ```r ggplot(data = gapminder, mapping = aes( # Let&#39;s make the x-axis gross-domestic product per capita (wealth per person) x = year, # Let&#39;s make the y-axis country life expectancy y = lifeExp)) ``` &lt;img src=&quot;_main_files/figure-html/unnamed-chunk-67-1.png&quot; width=&quot;672&quot; /&gt; Huh! We made an empty graph. Cool. That&#39;s because ggplot needs helper functions to add aesthetic features to the graph. For example, adding + geom_point() will overlay a scatterplot. # Make a scatterplot ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) + # same as above, except &quot;+&quot; geom_point() LC 1 Question What kind of relationship does this graph show? Why might it matter to policymakers? Answer The graph above shows that as average wealth (GDP per capita) in a country increases, those countries’ life expectancy increases swiftly, but then tapers off. This highlights that there is a strong relationship between wealth and health globally. LC 2 Question What happens when you add the alpha, changing its values in the 3 visuals below? # Run the following code: ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) + geom_point(alpha = 0.2) ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) + geom_point(alpha = 0.5) ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) + geom_point(alpha = 1) Answer Alpha ranges from 0 to 1 and describes feature transparency. Increasing alpha to 1 makes points fully opaque! Decreasing alpha to 0 makes points fully transparent! LC 3 Question We can make it more visually appealing. What happens when we do each of the following? If you want to make it a single color, where do you need to write color = ...? If you want to make it multiple colors according to a vector, where do you need to write color =? # Run the following code: # Version 1 ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) + geom_point(alpha = 0.5, color = &quot;steelblue&quot;) # Version 2 ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp, color = continent)) + geom_point(alpha = 0.5) Answer To assign a single color, you need to put color outside the aes() phrase, and write the name of the color. To assign multiple colors, you need to put the color inside the aes(...) phrase, and write the name of the vector in the data that it corresponds to (eg. continent). 4. Improving our Visualizations We can (and should!) make our visualizations much more readable by adding appropriate labels. ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp, color = continent)) + geom_point(alpha = 0.5) + # Add labels! labs(x = &quot;GDP per capita (USD)&quot;, # label for x-values y = &quot;Life Expectancy (years)&quot;, # label for y-values color = &quot;Continent&quot;, # label for colors title = &quot;Does Wealth affect Health?&quot;, # overall title subtitle = &quot;Global Health Trends by Continent&quot;, # subtitle! caption = &quot;Points display individual country-year observations.&quot;) # caption We can actually save visualizations as objects too, which can make things faster. Let’s save our visual as myviz myviz &lt;- ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp, color = continent)) + geom_point(alpha = 0.5) + labs(x = &quot;GDP per capita (USD)&quot;, y = &quot;Life Expectancy (years)&quot;, color = &quot;Continent&quot;, title = &quot;Does Wealth affect Health?&quot;, # overall title subtitle = &quot;Global Health Trends by Continent&quot;, # subtitle! caption = &quot;Points display individual country-year observations.&quot;) # caption Next, let’s try a few more learning check that will ask you to try our ways to improve the quality and readability of your visuals! LC 4 Question Now run myviz - what happens? myviz Answer When you save a ggplot to an object, eg. naming it myviz, you can call up the visual again as many times as you want by just running the myviz object, just like any other object. LC 5 Question We can do better, adding things onto our myviz object! Try changing themes. What happens below? # Version theme_bw myviz + # How about this theme? theme_bw() # Version theme_dark myviz + # How about this theme? theme_dark() # Version theme_classic myviz + # How about this theme? theme_classic() Answer theme_bw() makes a nice black-and-white graph; theme_dark() makes a funky graph with a dark grey background; theme_classic() makes a very simple graph, with fewer distractions. I personally really like the default theme or theme_bw(). Sometimes theme_classic() can be really helpful if you have a particularly busy visual. "],["visualize-diamonds-data.html", "5: Visualize diamonds data", " 5: Visualize diamonds data Next, let’s use the diamonds dataset, which comes with the ggplot2 package This is a dataset of over 50,000 diamond sales. # Check out first 3 rows... diamonds %&gt;% head(3) ## # A tibble: 3 × 10 ## carat cut color clarity depth table price x y z ## &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.23 Ideal E SI2 61.5 55 326 3.95 3.98 2.43 ## 2 0.21 Premium E SI1 59.8 61 326 3.89 3.84 2.31 ## 3 0.23 Good E VS1 56.9 65 327 4.05 4.07 2.31 We can use this visualization to check whether the cut of diamonds really has any relationship with price. glimpse(diamonds) ## Rows: 53,940 ## Columns: 10 ## $ carat &lt;dbl&gt; 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, 0.23, 0.… ## $ cut &lt;ord&gt; Ideal, Premium, Good, Premium, Good, Very Good, Very Good, Ver… ## $ color &lt;ord&gt; E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J, J, J, I,… ## $ clarity &lt;ord&gt; SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, SI1, VS1, … ## $ depth &lt;dbl&gt; 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, 59.4, 64… ## $ table &lt;dbl&gt; 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, 54, 62, 58… ## $ price &lt;int&gt; 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 339, 340, 34… ## $ x &lt;dbl&gt; 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87, 4.00, 4.… ## $ y &lt;dbl&gt; 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, 4.05, 4.… ## $ z &lt;dbl&gt; 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, 2.39, 2.… Looks like cut is an ordinal variable (fair, good, ideal, etc.), while price is numeric (eg. dollars). A boxplot might be helpful! ggplot(data = diamonds, mapping = aes(x = cut, y = price, group = cut)) + # notice how we added group = cut, to tell it to use 5 different boxes, one per cut? geom_boxplot() Huh. How odd. Looks like the cut of diamonds has very little impact on what price they are sold at! We can see lots of outliers at the top - really expensive diamonds for that cut. "],["lc-6.html", "LC 6 Question Answer", " LC 6 Question Let’s make this visualization more visually appealing. What changed in the code to make these two different visual effects? Why? (Hint: fill.) ggplot(data = diamonds, mapping = aes(x = cut, y = price, group = cut)) + geom_boxplot(fill = &quot;steelblue&quot;) ggplot(data = diamonds, mapping = aes(x = cut, y = price, group = cut, fill = cut)) + geom_boxplot() Answer In the first visual, we assigned all the boxplots to have the same fill (fill = \"steelblue\"), but in the second visual, we assigned the boxplot fill to be shaded based on the cut of diamond. This adds a cool color range! "],["section.html", "", " "],["lc-7.html", "LC 7 Question Answer", " LC 7 Question Sometimes, the names of categories won’t fit well. We can try the following. What did we do? ggplot(data = diamonds, mapping = aes(x = cut, y = price, group = cut, fill = cut)) + geom_boxplot() + coord_flip() Answer We used coord_flip() to flip the coordinates of the x and y axis, which gives our cut labels more room! "],["lc-8.html", "LC 8 Question Answer", " LC 8 Question Sometimes, the legend doesn’t fit well. We can try this: What happens when you change legend.position from \"right\" to \"bottom\" to \"left\" to \"top\"? ggplot(data = diamonds, mapping = aes(x = cut, y = price, group = cut, fill = cut)) + geom_boxplot() + coord_flip() + theme(legend.position = &quot;bottom&quot;) ggplot(data = diamonds, mapping = aes(x = cut, y = price, group = cut, fill = cut)) + geom_boxplot() + coord_flip() + theme(legend.position = &quot;right&quot;) ggplot(data = diamonds, mapping = aes(x = cut, y = price, group = cut, fill = cut)) + geom_boxplot() + coord_flip() + theme(legend.position = &quot;left&quot;) ggplot(data = diamonds, mapping = aes(x = cut, y = price, group = cut, fill = cut)) + geom_boxplot() + coord_flip() + theme(legend.position = &quot;top&quot;) Answer These four values for legend.position will relocate the fill legend (and any other legends) to be at the top, bottom, left, or right of the visual! "],["section-1.html", "", " "],["visualizing-distributions.html", "6. Visualizing Distributions", " 6. Visualizing Distributions Different geom_ functions use colors in different ways, but this is a good example. For example, below is a histogram. It visualizes the approximate distribution of a set of values. We can see how frequently diamonds are sold for certain prices versus others. ggplot(data = diamonds, mapping = aes(x = price, group = cut, fill = cut)) + geom_histogram(color = &quot;white&quot;) + # notice new function here labs(x = &quot;Price (USD)&quot;, y = &quot;Frequency of Price (Count)&quot;, title = &quot;US Diamond Sales&quot;) "],["lc-9.html", "LC 9 Question Answer", " LC 9 Question Are most diamonds cheap or expensive? What type of distribution would you call this? Normal? Uniform? Left Skewed? Right Skewed? Answer This is strongly right-skewed distribution, because the majority of the distribution leans to the left (the clump of the data), while it has a long tail that skews to the right. The median is less than the mean in a right skewed distribution. "],["section-2.html", "", " "],["breaking-up-a-visual.html", "6: Breaking up a visual", " 6: Breaking up a visual Finally, we might want to break up our visual into multiple parts. We can use facet_wrap to do this, but how exactly does it work? Let’s test it out. "],["lc-10.html", "LC 10 Question Answer", " LC 10 Question What changed in the code below, and what did it result in? ggplot(data = diamonds, mapping = aes(x = price, fill = cut)) + geom_histogram(color = &quot;white&quot;) + facet_wrap(~cut) + # must be categorical variable labs(x = &quot;Price (USD)&quot;, y = &quot;Frequency of Price (Count)&quot;, title = &quot;US Diamond Sales&quot;) Answer This visual split up our histograms into separate panels (making it much more readable), and easier to compare distributions. We write facet_wrap(~ before the variable name (eg. cut) to specify that we want to split up the data by the values of cut. This sorts our rows of data into 5 different piles (since there are 5 different categories in cut) and makes a panel out of each. You made it! You have now tried out a series of visuals in ggplot. We will use ggplot a lot in this course, so please be sure to reach out when you have questions, talk with others in your group, and work together to build great visualization skills! (Plus, it’s super applicable professionally!) "],["references.html", "References", " References Bye. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]

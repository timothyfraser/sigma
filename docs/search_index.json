[["index.html", "System Reliability and Six Sigma in R Introduction", " System Reliability and Six Sigma in R Timothy Fraser, PhD 2025-09-15 Introduction Your online textbook for learning reliability and six sigma techniques in R! These coding workshops were made for Cornell University Course SYSEN 5300. Follow along with Posit.Cloud to learn to apply six sigma techniques in R! Figure 0.1: Photo by Naser Tamimi on Unsplash "],["distributions-and-descriptive-statistics-in-python.html", "1 Distributions and Descriptive Statistics in Python Getting Started 1.1 Our Data 1.2 Size 1.3 Location 1.4 Spread (1) 1.5 Spread (2) 1.6 Shape 1.7 Finding Parameters for Your Distributions 1.8 Common Distributions 1.9 Comparing Distributions Learning Check 1 Conclusion", " 1 Distributions and Descriptive Statistics in Python This tutorial introduces distributions and descriptive statistics in Python using pandas and helper functions that mirror R’s syntax. Getting Started Install and Import Packages %pip install pandas plotnine scipy import os, sys import pandas as p from plotnine import * sys.path.append(os.path.abspath(&#39;functions&#39;)) from functions_distributions import * 1.1 Our Data sw = p.Series([4.5, 5, 5.5, 5, 5.5, 6.5, 6.5, 6, 5, 4]) sw ## 0 4.5 ## 1 5.0 ## 2 5.5 ## 3 5.0 ## 4 5.5 ## 5 6.5 ## 6 6.5 ## 7 6.0 ## 8 5.0 ## 9 4.0 ## dtype: float64 1.2 Size 1.2.1 Length len(sw) ## 10 1.3 Location 1.3.1 Mean and Median sw.mean() ## np.float64(5.35) sw.median() ## np.float64(5.25) 1.3.2 Mode sw.mode() ## 0 5.0 ## dtype: float64 1.4 Spread (1) 1.4.1 Percentiles sw.quantile(q=0) # min ## np.float64(4.0) sw.quantile(q=1) # max ## np.float64(6.5) sw.quantile(q=.75) ## np.float64(5.875) 1.5 Spread (2) 1.5.1 Standard Deviation, Variance, CV, SE # Manual SD (sample) x = ((sw - sw.mean())**2).sum() x = x / (len(sw) - 1) x**0.5 ## np.float64(0.8181958472422385) sw.std() ## np.float64(0.8181958472422385) sw.var() ## np.float64(0.6694444444444445) sw.std()**2 ## np.float64(0.6694444444444444) sw.std() / sw.mean() # CV ## np.float64(0.15293380322284833) se = sw.std() / (len(sw)**0.5) se ## np.float64(0.25873624493766706) 1.6 Shape 1.6.1 Skewness and Kurtosis diff = sw - sw.mean() n = len(sw) - 1 sigma = sw.std() sum(diff**3) / (n * sigma**3) ## np.float64(0.024342597820882206) sum(diff**4) / (n * sigma**4) ## np.float64(1.8758509667533272) # Using helper functions mirroring R skewness(sw) ## np.float64(0.024342597820882206) kurtosis(sw) ## np.float64(1.8758509667533272) 1.7 Finding Parameters for Your Distributions sw = p.Series([4.5, 5, 5.5, 5, 5.5, 6.5, 6.5, 6, 5, 4]) mymean = sw.mean() mysd = sw.std() 1.8 Common Distributions 1.8.1 Normal mynorm = rnorm(n=1000, mean=mymean, sd=mysd) hist(mynorm) ## &lt;plotnine.ggplot.ggplot object at 0x000001CAEBA9B3B0&gt; 1.8.2 Poisson mypois = rpois(n=1000, mu=mymean) hist(mypois) ## &lt;plotnine.ggplot.ggplot object at 0x000001CAFF825C10&gt; 1.8.3 Exponential myrate_e = 1 / sw.mean() myexp = rexp(n=1000, rate=myrate_e) hist(myexp) ## &lt;plotnine.ggplot.ggplot object at 0x000001CAFF5D7E00&gt; 1.8.4 Gamma myshape = sw.mean()**2 / sw.var() myrate = 1 / (sw.var() / sw.mean()) mygamma = rgamma(n=1000, shape=myshape, rate=myrate) hist(mygamma) ## &lt;plotnine.ggplot.ggplot object at 0x000001CAFF826CC0&gt; 1.8.5 Weibull from scipy import stats as fitdistr myshape_w, loc, myscale_w = fitdistr.weibull_min.fit(sw, floc=0) myweibull = rweibull(n=1000, shape=myshape_w, scale=myscale_w) hist(myweibull) ## &lt;plotnine.ggplot.ggplot object at 0x000001CAFF4CD640&gt; 1.9 Comparing Distributions mysim = p.concat([ p.DataFrame({&#39;x&#39;: sw, &#39;type&#39;: &quot;Observed&quot;}), p.DataFrame({&#39;x&#39;: mynorm, &#39;type&#39;: &quot;Normal&quot;}), p.DataFrame({&#39;x&#39;: mypois, &#39;type&#39;: &quot;Poisson&quot;}), p.DataFrame({&#39;x&#39;: mygamma, &#39;type&#39;: &quot;Gamma&quot;}), p.DataFrame({&#39;x&#39;: myexp, &#39;type&#39;: &quot;Exponential&quot;}), p.DataFrame({&#39;x&#39;: myweibull, &#39;type&#39;: &quot;Weibull&quot;}) ]) g1 = (ggplot(mysim, aes(x=&#39;x&#39;, fill=&#39;type&#39;)) + geom_density(alpha=0.5) + labs(x=&#39;Seawall Height (m)&#39;, y=&#39;Density (Frequency)&#39;, subtitle=&#39;Which distribution fits best?&#39;, fill=&#39;Type&#39;)) g1 ## &lt;plotnine.ggplot.ggplot object at 0x000001CAFF5D7CE0&gt; g1 + xlim(0,10) ## &lt;plotnine.ggplot.ggplot object at 0x000001CAFF825970&gt; Learning Check 1 Question Simulate 1000 draws from a normal distribution using your sw mean and standard deviation. What are the simulated mean and sd? How close are they to sw’s? [View Answer!] mymean = sw.mean(); mysd = sw.std() m = rnorm(1000, mean=mymean, sd=mysd) [m.mean(), m.std()] ## [np.float64(5.348166130314063), np.float64(0.8011466977915525)] Conclusion You computed size, location, spread, and shape statistics and compared common simulated distributions using helper functions that mirror R. "],["appendix-test.html", "2 Appendix: test Getting Started", " 2 Appendix: test Getting Started This is just a test document, placed at the end of the book. library(dplyr) Version 1 2.0.0.1 R # R code mtcars$hp %&gt;% mean() ## [1] 146.6875 2.0.0.2 Python # Python code import pandas as pd data = pd.DataFrame({&#39;hello&#39;: [1,2,3]}) print(data.hello.mean()) ## 2.0 Version 2 R Python # R code mtcars$hp %&gt;% mean() ## [1] 146.6875 # Python code import pandas as pd data = pd.DataFrame({&#39;hello&#39;: [1,2,3]}) print(data.hello.mean()) ## 2.0 Did it work? "]]
